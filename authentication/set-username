<script>
  // Ensure AWS region is set globally
  AWS.config.region = 'us-east-2';  // Replace with your AWS region

  // Function to get the current username from DynamoDB
  function getCurrentUsername(userId) {
    const docClient = new AWS.DynamoDB.DocumentClient();

    const params = {
      TableName: 'artHistoryGG',
      KeyConditionExpression: 'UserId = :userId AND DataType = :dataType',
      ExpressionAttributeValues: {
        ':userId': userId,
        ':dataType': 'PublicUsername'
      }
    };

    return docClient.query(params).promise();  // Return a promise
  }

  // Function to update username in DynamoDB
  function updateUsername(userId, newUsername) {
    console.log(`Attempting to update username for userId: ${userId} with newUsername: ${newUsername}`);

    const docClient = new AWS.DynamoDB.DocumentClient();

    const params = {
      TableName: 'artHistoryGG',
      Item: {
        UserId: userId,
        DataType: 'PublicUsername',
        Username: newUsername
      }
    };

    return docClient.put(params).promise()
      .then(() => {
        console.log(`Username successfully updated for userId: ${userId} with newUsername: ${newUsername}`);
        
        // Update the placeholder with the new username after successful update
        const usernameInput = document.querySelector('[user="usernameInput"]');
        if (usernameInput) {
          usernameInput.placeholder = newUsername;
        }

        // Update any text elements with user="usernameText" to the new username
        const usernameTextElements = document.querySelectorAll('[user="usernameText"]');
        usernameTextElements.forEach(element => {
          element.textContent = newUsername;
        });

        console.log(`Placeholder and text elements updated to new username: ${newUsername}`);
      })
      .catch((err) => {
        console.error('Error updating username:', err);
      });
  }

  // Function to check if the username is unique
  function checkUsernameUniqueness(newUsername) {
    console.log(`Checking uniqueness for username: ${newUsername}`);

    const docClient = new AWS.DynamoDB.DocumentClient();

    const params = {
      TableName: 'artHistoryGG',
      IndexName: 'DataType-Username-index',  // Ensure this GSI is set up in DynamoDB to search by username
      KeyConditionExpression: 'DataType = :dataType AND Username = :username',
      ExpressionAttributeValues: {
        ':dataType': 'PublicUsername',
        ':username': newUsername
      }
    };

    return docClient.query(params).promise();  // Return a promise
  }

  // Function to load and display the current username as a placeholder and in text elements
  function loadCurrentUsername() {
    const userId = AWS.config.credentials.identityId;

    console.log(`Fetching current username for userId: ${userId}`);

    getCurrentUsername(userId)
      .then((data) => {
        if (data.Items && data.Items.length > 0) {
          const currentUsername = data.Items[0].Username;
          console.log(`Current username found: ${currentUsername}`);

          // Set the current username as the placeholder value in the input field
          const usernameInput = document.querySelector('[user="usernameInput"]');
          if (usernameInput) {
            usernameInput.placeholder = currentUsername;
          }

          // Set the current username in all user="usernameText" elements
          const usernameTextElements = document.querySelectorAll('[user="usernameText"]');
          usernameTextElements.forEach(element => {
            element.textContent = currentUsername;
          });

          console.log(`Placeholder and text elements set to current username: ${currentUsername}`);
        } else {
          console.log('No existing username found for this user.');
        }
      })
      .catch((err) => {
        console.error('Error fetching current username:', err);
      });
  }

  // Function to handle username submission
  function handleUsernameSubmission() {
    const usernameInput = document.querySelector('[user="usernameInput"]');
    if (!usernameInput) {
      console.error('Username input field not found.');
      return;
    }

    const username = usernameInput.value.trim();
    const usernamePattern = /^[a-zA-Z0-9.]{1,15}$/;  // Only letters, numbers, periods, up to 15 characters

    console.log(`Handling submission for username: ${username}`);

    // Check if the username is valid
    if (!usernamePattern.test(username)) {
      alert('Invalid username. Only letters, numbers, and periods are allowed, and it must be under 15 characters.');
      console.log(`Username validation failed for: ${username}`);
      return;
    }

    // Check if the username is unique
    checkUsernameUniqueness(username)
      .then((data) => {
        const userId = AWS.config.credentials.identityId;

        // If username is found and belongs to another user
        if (data.Items && data.Items.length > 0) {
          const existingUser = data.Items[0];
          if (existingUser.UserId !== userId) {
            // Username is taken by another user
            console.log(`Username is already taken by another user: ${username}`);
            const duplicateMessage = document.querySelector('[user="userNameDuplicate"]');
            if (duplicateMessage) {
              duplicateMessage.classList.add('show');
            }
            return;
          }
        }

        // Username is either unique or belongs to the current user, proceed with update
        console.log(`Username is unique or belongs to the current user: ${username}`);

        updateUsername(userId, username)
          .then(() => {
            console.log(`Username updated successfully: ${username}`);
          })
          .catch((err) => {
            console.error('Error updating username:', err);
          });
      })
      .catch((err) => {
        console.error('Error checking username uniqueness:', err);
      });
  }

  // Attach event listener to the submit button
  const submitUsernameButton = document.querySelector('[user="submitUsername"]');
  if (submitUsernameButton) {
    submitUsernameButton.addEventListener('click', (event) => {
      event.preventDefault();
      handleUsernameSubmission();
    });
  } else {
    console.log('Submit button not found.');
  }

  // Add pattern validation on the input field if it exists
  const usernameInput = document.querySelector('[user="usernameInput"]');
  if (usernameInput) {
    usernameInput.setAttribute('pattern', '[a-zA-Z0-9.]{1,15}');
  } else {
    console.log('Username input field not found.');
  }

  // Run the loadCurrentUsername function only when credentials are available and usernameInput exists
  function initializeUsername() {
    console.log("Initializing username...");

    if (AWS.config.credentials && AWS.config.credentials.identityId) {
      AWS.config.credentials.get(function (err) {
        if (err) {
          console.error("Error loading AWS credentials:", err);
        } else {
          console.log("AWS credentials loaded. Proceeding to load username...");
          const usernameInput = document.querySelector('[user="usernameInput"]');
          if (usernameInput) {
            loadCurrentUsername();  // Call the function after credentials are ready only if the input exists
          }
        }
      });
    } else {
      console.error("AWS credentials not set up.");
    }
  }

  // Attach the initializeUsername function to DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    if (AWS.config.credentials) {
      AWS.config.credentials.get(function (err) {
        if (err) {
          console.error("Error retrieving AWS credentials during page load", err);
        } else {
          console.log("AWS credentials are present and valid");
          initializeUsername();
        }
      });
    } else {
      console.error("AWS credentials are not available on page load.");
    }
  });

</script>
