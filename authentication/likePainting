<script>
  // Ensure AWS region is set globally
  AWS.config.region = 'us-east-2';  // Replace with your AWS region

  // Function to like a painting (write to DynamoDB)
  function likePainting(userId, paintingUrl, imgSrc, altText) {
    const docClient = new AWS.DynamoDB.DocumentClient();

    const params = {
      TableName: 'artHistoryGG',
      Item: {
        UserId: userId,
        DataType: `LikedPainting#${paintingUrl}`,  // Unique identifier for each liked painting
        PaintingUrl: paintingUrl,
        ImgSrc: imgSrc,
        AltText: altText
      }
    };

    docClient.put(params, function(err, data) {
      if (err) {
        console.error("Error liking painting:", err);
      } else {
        console.log("Painting liked successfully:", data);
      }
    });
  }

  // Function to unlike a painting (delete from DynamoDB)
  function unlikePainting(userId, paintingUrl) {
    const docClient = new AWS.DynamoDB.DocumentClient();

    const params = {
      TableName: 'artHistoryGG',
      Key: {
        UserId: userId,
        DataType: `LikedPainting#${paintingUrl}`
      }
    };

    docClient.delete(params, function(err, data) {
      if (err) {
        console.error("Error unliking painting:", err);
      } else {
        console.log("Painting unliked successfully:", data);
      }
    });
  }

  // Function to handle the like/unlike click event
  function handleLikeClick(event) {
    const clickedElement = event.target;

    if (clickedElement.getAttribute('user') === 'like') {
      const paintingLink = clickedElement.parentElement.querySelector('[user="painting"]');
      const paintingUrl = paintingLink.getAttribute('href');
      const imgElement = paintingLink.querySelector('img');
      const imgSrc = imgElement.getAttribute('src');
      const altText = imgElement.getAttribute('alt');

      // Use cached credentials from Script 1
      const userId = AWS.config.credentials.identityId;

      // Proceed with the DynamoDB operation (like/unlike)
      if (clickedElement.classList.contains('is-liked')) {
        unlikePainting(userId, paintingUrl);
        clickedElement.classList.remove('is-liked');
      } else {
        likePainting(userId, paintingUrl, imgSrc, altText);
        clickedElement.classList.add('is-liked');
      }
    }
  }

  // Function to load liked paintings and update the UI
  function loadLikedPaintings() {
    const userId = AWS.config.credentials.identityId;
    const docClient = new AWS.DynamoDB.DocumentClient();

    const params = {
      TableName: 'artHistoryGG',
      KeyConditionExpression: 'UserId = :userId AND begins_with(DataType, :likedPainting)',
      ExpressionAttributeValues: {
        ':userId': userId,
        ':likedPainting': 'LikedPainting#'
      }
    };

    // Query DynamoDB for the user's liked paintings
    docClient.query(params, function(err, data) {
      if (err) {
        console.error("Error loading liked paintings:", err);
      } else {
        console.log("Liked paintings retrieved:", data.Items);
        updateLikedPaintingsUI(data.Items);  // Update the UI to reflect liked paintings
      }
    });
  }

  // Function to update the UI to show liked paintings
  function updateLikedPaintingsUI(likedPaintings) {
    likedPaintings.forEach(function(item) {
      const paintingUrl = item.PaintingUrl;

      // Find the corresponding painting link on the page using the painting URL
      const paintingLink = document.querySelector(`[user="painting"][href="${paintingUrl}"]`);
      if (paintingLink) {
        const likeButton = paintingLink.parentElement.querySelector('[user="like"]');
        if (likeButton) {
          likeButton.classList.add('is-liked');  // Mark the painting as liked
        }
      }
    });
  }

  // Ensure credentials are loaded before performing any operations
  function initializeLikedPaintings() {
    AWS.config.credentials.get(function(err) {
      if (err) {
        console.error("Error loading AWS credentials:", err);
        return;
      }
      console.log("Credentials loaded. Calling loadLikedPaintings...");
      loadLikedPaintings();  // Load liked paintings on page load
    });
  }

  // Attach event listener to the document to handle clicks on user="like" elements
  document.addEventListener('click', handleLikeClick);

  // Run the initialization when the page first loads
  //document.addEventListener('DOMContentLoaded', initializeLikedPaintings);

  // Listen for dynamically loaded items via `cmsload`
  window.fsAttributes = window.fsAttributes || [];
  window.fsAttributes.push([
    'cmsload',
    (listInstances) => {
      console.log('cmsload Successfully loaded!');

      const [listInstance] = listInstances;

      // Listen for when new items are rendered dynamically
      listInstance.on('renderitems', (renderedItems) => {
        console.log('New items rendered:', renderedItems);

        // Call loadLikedPaintings to check the newly added user="painting" elements
        loadLikedPaintings();  // Check liked status for new items

        // If needed, iterate through the newly rendered items for further customization
        renderedItems.forEach((item) => {
          const newPaintings = item.element.querySelectorAll('[user="painting"]');
          newPaintings.forEach((painting) => {
            console.log('New painting element detected:', painting);
          });
        });
      });
    }
  ]);
</script>
